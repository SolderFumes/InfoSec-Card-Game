//CS 112 Project 4, Infosec Card Game 
//https://github.com/SolderFumes/InfoSec-Card-Game
//Luka Schuller

#include "ExploitCard.h"

using namespace std;


//CONSTRUCTORS
ExploitCard::ExploitCard() : GameCard() {
    cardDamage = DEFAULT_DAMAGE;
    successRate = DEFAULT_SUCCESS_RATE;
}

ExploitCard::ExploitCard(string newName, string newDescription, int newBandwidth,
                         string newImageLink, AttackSurface newAttackSurface, int newDamage, double newSuccessRate)
                         : GameCard(newName, newDescription, newBandwidth, newImageLink, newAttackSurface) {
                            cardDamage = DEFAULT_DAMAGE;
                            successRate = DEFAULT_SUCCESS_RATE;
                         }


//GETTERS

int ExploitCard::getCardDamage() const { return cardDamage; }

double ExploitCard::getSuccessRate() const { return successRate; }

//SETTERS

void ExploitCard::setCardDamage(int newDamage) { cardDamage = newDamage; }

void ExploitCard::setSuccessRate(double newSuccessRate) { successRate = newSuccessRate; }

//OTHER METHODS

void ExploitCard::attack(Player& target) {
    //! REMEMBER TO REMOVE THE CARD AFTER IT ATTACKS
    //start by checking if the target has an active defenseCard
    if (target.hasDefense()) {
        //damage the card and store how much health is left over
        int healthLeftOver = target.firstDefenseCard()->reduceCardHealth(cardDamage);
        if (healthLeftOver < 0) {
            //store the new amount of damage
            int damageLeftOver = fabs(healthLeftOver);
            //while there are cards to damage and the card still has damage left to do
            while (target.hasDefense() && damageLeftOver > 0) {
                healthLeftOver = target.firstDefenseCard()->reduceCardHealth(damageLeftOver);
                if (healthLeftOver < 0) {
                    damageLeftOver = fabs(healthLeftOver);
                } 
                else {
                    damageLeftOver = 0;
                }
            }
            //now the loop has exited, and either the target has ran out of defense cards
            //or the card has 0 damageLeftOver
            target.reducePlayerHP(damageLeftOver);
        }
    }
    else {
        //in this case, there are no defensive cards, so we just directly damage the player.
        target.reducePlayerHP(cardDamage);
    }
}

void ExploitCard::display() const {
    cout << fixed << setprecision(2);
    GameCard::display();
    cout << " Deals " << cardDamage << " damage and has a success rate of " 
         << (successRate * 100) << " percent.";
}

string ExploitCard::toString() const {
    string returnString = GameCard::toString();
    returnString += " | Damage: " + to_string(cardDamage);
    returnString += " | Success Rate: " + to_string(successRate);
    
    return returnString;
}